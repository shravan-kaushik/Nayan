import pyximport; pyximport.install()
from platform import system as cur_system
from subprocess import Popen

from PyQt5.QtCore import (Qt,
                          QEasingCurve,
                          QPropertyAnimation)
from PyQt5.QtWidgets import (QApplication,
                             QCheckBox,
                             QFileDialog,
                             QGraphicsOpacityEffect,
                             QHeaderView,
                             QMainWindow,
                             QMenu,
                             QMessageBox,
                             QProgressDialog,
                             QTableWidgetItem)
from send2trash import send2trash

from imageviewer import ImageViewer
from scanhandler import Scanner

DARK_PALETTE = None
LIGHT_PALETTE = None
ACTIVE_PALETTE = 1  # 0 is light, 1 is dark


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        from mainwindow_ui import Ui_MainWindow

        self.defaults = {
            "THRESHOLD": 90,
            "ALGORITHM": "dHash",
        }
        self.all_selected = False
        self.scanner = None
        self.info_store = None
        self.confirm_delete = True
        self.anim1 = None
        self.anim2 = None
        self.image_viewer1 = ImageViewer(self)  # adding these via Ui_MainWindow causes the "wrapped
        self.image_viewer2 = ImageViewer(self)  # C++ object of type QLabel has been deleted" issue
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setup_ui_more()
        self.setup_connections()
        self.show()

    def setup_ui_more(self):
        self.ui.gridLayout_img1.addWidget(self.image_viewer1, 3, 0, 1, 5)
        self.ui.gridLayout_img2.addWidget(self.image_viewer2, 3, 0, 1, 5)
        self.ui.spinBox_threshold.setValue(self.defaults["THRESHOLD"])
        self.ui.comboBox_algorithm.setCurrentText(self.defaults["ALGORITHM"])
        self.ui.groupBox_scanOptions.hide()
        self.ui.splitter.setStretchFactor(0, 5)
        self.ui.splitter.setStretchFactor(1, 2)
        menu = QMenu(self)
        menu.addAction("Apply auto-delete on all pairs", self.auto_del_all)
        self.ui.toolButton_autoDel.setMenu(menu)
        self.setAcceptDrops(True)

        import qtawesome as qta
        self.ui.pushButton_img1Delete.setIcon(
            qta.icon("fa.trash", color='white', color_active='#34DB8A'))
        self.ui.pushButton_img2Delete.setIcon(
            qta.icon("fa.trash", color='white', color_active='#34DB8A'))
        self.ui.pushButton_img1OpenFolder.setIcon(
            qta.icon("fa.folder-open", color='white', color_active='#34DB8A'))
        self.ui.pushButton_img2OpenFolder.setIcon(
            qta.icon("fa.folder-open", color='white', color_active='#34DB8A'))
        self.ui.pushButton_swap.setIcon(
            qta.icon("fa.exchange", color='white', color_active='#34DB8A'))
        self.ui.pushButton_up.setIcon(
            qta.icon("fa.arrow-up", color='white', color_active='#34DB8A'))
        self.ui.pushButton_down.setIcon(
            qta.icon("fa.arrow-down", color='white', color_active='#34DB8A'))
        self.ui.pushButton_rotateImg1.setIcon(
            qta.icon("fa.rotate-right", color='white', color_active='#34DB8A'))
        self.ui.pushButton_rotateImg2.setIcon(
            qta.icon("fa.rotate-right", color='white', color_active='#34DB8A'))
        self.ui.toolButton_autoDel.setIcon(
            qta.icon("fa.magic", color='white', color_active='#34DB8A'))
        self.ui.pushButton_scan.setIcon(
            qta.icon("fa.search", color='white', color_active='#34DB8A'))
        self.ui.pushButton_cancelOperation.setIcon(
            qta.icon("fa.times-circle", color='white', color_active='#34DB8A'))

    def setup_connections(self):
        self.ui.listWidget_targets.set_items_added_callback_fn(self.update_items_count)
        self.ui.listWidget_targets.itemSelectionChanged.connect(self.reset_all_selected)
        self.ui.pushButton_addFilesFolders.clicked.connect(self.add_files_folders)
        self.ui.pushButton_selectAll.clicked.connect(self.select_deselect_all)
        self.ui.pushButton_removeSelected.clicked.connect(self.remove_selected)
        self.ui.pushButton_resetScanOptions.clicked.connect(self.reset_scan_options)
        self.ui.pushButton_scan.clicked.connect(self.scan)
        self.ui.tableWidget_results.itemSelectionChanged.connect(
            self.result_table_selection_changed)
        self.ui.pushButton_swap.clicked.connect(self.swap_images)
        self.ui.pushButton_delBoth.clicked.connect(self.del_both)
        self.ui.toolButton_autoDel.clicked.connect(self.auto_del)
        self.ui.pushButton_img1Delete.clicked.connect(self.del_left_image)
        self.ui.pushButton_img2Delete.clicked.connect(self.del_right_image)
        self.ui.pushButton_img1OpenFolder.clicked.connect(self.open_left_img_folder)
        self.ui.pushButton_img2OpenFolder.clicked.connect(self.open_right_img_folder)
        self.ui.pushButton_rotateImg1.clicked.connect(self.image_viewer1.rotate_image)
        self.ui.pushButton_rotateImg2.clicked.connect(self.image_viewer2.rotate_image)
        self.ui.actionExit.triggered.connect(self.close)
        self.ui.actionAbout.triggered.connect(self.about)
        self.ui.actionToggle_theme.triggered.connect(self.toggle_theme)
        self.ui.pushButton_up.clicked.connect(self.ui.listWidget_autoDelRules.up)
        self.ui.pushButton_down.clicked.connect(self.ui.listWidget_autoDelRules.down)

    def resizeEvent(self, e):
        self.ui.tableWidget_results.resizeColumnsToContents()
        self.ui.tableWidget_results.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.ui.tableWidget_results.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)

    def dragEnterEvent(self, e):
        if not self.ui.tabWidget.currentIndex():
            if e.mimeData().hasUrls():
                e.accept()

    def dropEvent(self, e):
        if not self.ui.tabWidget.currentIndex():
            mime_data = e.mimeData()
            if mime_data.hasUrls():
                self.add_files_folders([x.toLocalFile() for x in mime_data.urls()])
                e.accept()

    def dragMoveEvent(self, e):
        if not self.ui.tabWidget.currentIndex():
            e.accept()

    def dragLeaveEvent(self, e):
        if not self.ui.tabWidget.currentIndex():
            e.accept()

    @staticmethod
    def sizeof_fmt(num, suffix='B'):
        for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti']:
            if abs(num) < 1024.0:
                return "%3.1f %s%s" % (num, unit, suffix)
            num /= 1024.0
        return "%.1f%s%s" % (num, 'Yi', suffix)

    @staticmethod
    def open_folder(path):
        if cur_system() == "Windows":
            Popen(["explorer", "/select,", path])
        elif cur_system() == "Darwin":
            Popen(["open", path])
        else:
            Popen(["xdg-open", path])

    def add_files_folders(self, paths=None):
        if not paths:
            from PyQt5.QtWidgets import (QAbstractItemView,
                                         QListView,
                                         QTreeView)

            dlg = QFileDialog(self, "Add files/folders...")
            dlg.setAcceptMode(QFileDialog.AcceptOpen)
            dlg.setFileMode(QFileDialog.Directory)
            dlg.setOption(QFileDialog.DontUseNativeDialog)
            l = dlg.findChild(QListView, "listView")
            if l:
                l.setSelectionMode(QAbstractItemView.MultiSelection)
            t = dlg.findChild(QTreeView)
            if t:
                t.setSelectionMode(QAbstractItemView.MultiSelection)
            if not dlg.exec_():
                return
            paths = dlg.selectedFiles()
        mb = QMessageBox(QMessageBox.Information,
                         "Nayan - Information",
                         "Please wait...\n"
                         "This may take a while and Nayan may seem unresponsive.")
        mb.show()
        QApplication.processEvents()
        self.ui.listWidget_targets.add_unique(paths)
        mb.hide()

    def update_items_count(self):
        self.ui.label_no_of_items.setText("Number of files: %d" %
                                          self.ui.listWidget_targets.count())

    def reset_all_selected(self):
        self.all_selected = False
        self.ui.pushButton_selectAll.setText("Select all")

    def select_deselect_all(self):
        if not self.all_selected and self.ui.listWidget_targets.count():
            self.ui.listWidget_targets.selectAll()
            self.ui.pushButton_selectAll.setText("Deselect all")
            self.all_selected = True
        else:
            self.ui.listWidget_targets.clearSelection()

    def remove_selected(self):
        take_item = self.ui.listWidget_targets.takeItem
        row = self.ui.listWidget_targets.row
        for item in self.ui.listWidget_targets.selectedItems():
            take_item(row(item))
        self.update_items_count()

    def reset_scan_options(self):
        self.ui.dial_threshold.setValue(self.defaults["THRESHOLD"])
        self.ui.spinBox_threshold.setValue(self.defaults["THRESHOLD"])
        self.ui.comboBox_algorithm.setCurrentText(self.defaults["ALGORITHM"])

    def scan(self):
        if self.ui.listWidget_targets.count() < 2:
            QMessageBox.warning(self,
                                "Warning - Nayan",
                                "You need to add at least 2 images to the target list.")
            return
        self.set_ui_frozen(True)
        self.ui.label_operationLabel.setText("Starting...")
        self.ui.progressBar_operation.setMaximum(100)
        self.ui.progressBar_operation.setValue(0)
        self.ui.stackedWidget.setCurrentIndex(1)
        QApplication.processEvents()

        lw = self.ui.listWidget_targets
        files = [lw.item(i).text() for i in range(lw.count())]

        self.scanner = Scanner(files,
                               self.ui.comboBox_algorithm.currentText(),
                               self.ui.dial_threshold.value(),
                               self)

        self.scanner.sig_set_operation_text.connect(
            self.ui.label_operationLabel.setText)
        self.scanner.sig_reset_progress.connect(
            self.ui.progressBar_operation.reset)
        self.scanner.sig_progress_changed.connect(
            self.ui.progressBar_operation.setValue)
        self.scanner.sig_stopped.connect(
            lambda: self.ui.stackedWidget.setCurrentIndex(0))
        self.scanner.sig_stopped.connect(lambda: self.set_ui_frozen(False))
        self.ui.pushButton_cancelOperation.clicked.connect(
            lambda: self.scanner.requestInterruption())
        self.scanner.sig_finished.connect(self.scan_finished)
        self.scanner.start()

    def clear_image_and_info(self):
        self.ui.label_img1Name.clear()
        self.ui.label_img1Size.clear()
        self.ui.label_img1Dimension.clear()
        self.ui.label_img2Name.clear()
        self.ui.label_img2Size.clear()
        self.ui.label_img2Dimension.clear()
        self.ui.label_similarity.clear()
        self.image_viewer1.clear_image()
        self.image_viewer2.clear_image()

    def scan_finished(self):
        tbl_res = self.ui.tableWidget_results
        self.ui.label_operationLabel.setText("Populating table...")
        self.ui.tableWidget_results.itemSelectionChanged.disconnect(
            self.result_table_selection_changed)
        self.ui.progressBar_operation.setMaximum(0)
        tbl_res.clearSelection()
        remove_row = tbl_res.removeRow
        at_least_one_row_exists = tbl_res.rowCount
        while at_least_one_row_exists():
            remove_row(0)
        self.clear_image_and_info()
        dups = self.scanner.duplicates
        tbl_set_item = tbl_res.setItem
        tbl_insert_row = tbl_res.insertRow
        for i, r in enumerate(dups):
            tbl_insert_row(i)
            it_0 = QTableWidgetItem(r.A)
            it_1 = QTableWidgetItem(r.B)
            it_2 = IntegerTableWidgetItem(dups[r])
            tbl_set_item(i, 0, it_0)
            tbl_set_item(i, 1, it_1)
            tbl_set_item(i, 2, it_2)

        self.info_store = self.scanner.info.copy()
        self.scanner = None

        tbl_res.resizeColumnsToContents()
        tbl_res.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        tbl_res.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        tbl_res.sortByColumn(2, Qt.DescendingOrder)

        self.set_ui_frozen(False)
        self.ui.tableWidget_results.itemSelectionChanged.connect(
            self.result_table_selection_changed)
        if at_least_one_row_exists():
            tbl_res.selectRow(0)
        self.ui.tabWidget.setCurrentIndex(1)
        self.ui.stackedWidget.setCurrentIndex(0)

    def result_table_selection_changed(self):
        if not self.ui.tableWidget_results.rowCount() or not self.info_store:
            self.clear_image_and_info()
            return
        info = self.info_store
        items = self.ui.tableWidget_results.selectedItems()
        if not items:
            self.clear_image_and_info()
            return
        img1_filename = items[0].text()
        img2_filename = items[1].text()
        self.ui.label_similarity.setText(items[2].text() + "%")
        self.ui.label_img1Name.setText(info[img1_filename][0])
        self.ui.label_img2Name.setText(info[img2_filename][0])
        self.ui.label_img1Size.setText(self.sizeof_fmt(info[img1_filename][1]))
        self.ui.label_img2Size.setText(self.sizeof_fmt(info[img2_filename][1]))
        w, h = info[img1_filename][2]
        self.ui.label_img1Dimension.setText("%s x %s px" % (w, h))
        w, h = info[img2_filename][2]
        self.ui.label_img2Dimension.setText("%s x %s px" % (w, h))
        self.image_viewer1.set_image(img1_filename)
        self.image_viewer2.set_image(img2_filename)

    def swap_images(self):
        if not self.ui.tableWidget_results.rowCount():
            return
        self.ui.tableWidget_results.setEnabled(False)
        items = self.ui.tableWidget_results.selectedItems()
        if not items:
            return
        img2_filename = items[1].text()
        items[1].setText(items[0].text())
        items[0].setText(img2_filename)
        self.result_table_selection_changed()
        self.ui.tableWidget_results.setEnabled(True)

    def del_both(self):
        pass
        # tbl = self.ui.tableWidget_results
        # tbl.setEnabled(False)
        # items = tbl.selectedItems()
        # if items:
        #     self.del_image(items[0], self.image_viewer1.label)
        # tbl.setEnabled(True)

    def del_left_image(self):
        tbl = self.ui.tableWidget_results
        tbl.setEnabled(False)
        items = tbl.selectedItems()
        if items:
            self.del_image(items[0], self.image_viewer1.label)
        tbl.setEnabled(True)

    def del_right_image(self):
        tbl = self.ui.tableWidget_results
        tbl.setEnabled(False)
        items = tbl.selectedItems()
        if items:
            self.del_image(items[1], self.image_viewer2.label)
        tbl.setEnabled(True)

    def del_image(self, item, wid, interactive=True):
        filename = item.text()
        if self.confirm_delete:
            mbox = QMessageBox(QMessageBox.Question,
                               "Nayan - Question",
                               "Are you sure you want to delete %s?" % filename,
                               QMessageBox.Yes | QMessageBox.No,
                               self)
            cbox = QCheckBox("&Don't ask again", mbox)
            mbox.setCheckBox(cbox)
            mbox_res = mbox.exec_()
            if mbox_res == QMessageBox.No:
                return
            self.confirm_delete = not cbox.isChecked()
        try:
            # print(filename, "pseudo-deleted")
            send2trash(filename)
        except OSError:
            QMessageBox.warning(self,
                                "Nayan - Warning",
                                "Failed to delete the file! Please check whether the file exists "
                                "and Nayan has permission to delete it.",
                                QMessageBox.Close)
            return

        def whendone(tbl):
            selected_row = tbl.row(item)
            tbl.removeRow(selected_row)
            num_rows = tbl.rowCount()
            if num_rows > 1:
                tbl.selectRow(min(selected_row, num_rows - 1))
            elif num_rows == 1:
                tbl.selectRow(0)

            if interactive:
                anim2 = QPropertyAnimation(effect, b"opacity")
                anim2.setDuration(150)
                anim2.setStartValue(0.2)
                anim2.setEndValue(1.0)
                anim2.setEasingCurve(QEasingCurve.InExpo)
                anim2.start()
                self.anim2 = anim2

        if interactive:
            effect = QGraphicsOpacityEffect(wid)
            wid.setGraphicsEffect(effect)
            anim1 = QPropertyAnimation(effect, b"opacity")
            anim1.setDuration(150)
            anim1.setStartValue(1.0)
            anim1.setEndValue(0.2)
            anim1.setEasingCurve(QEasingCurve.OutExpo)
            anim1.finished.connect(lambda: whendone(self.ui.tableWidget_results))
            anim1.start()
            self.anim1 = anim1
        else:
            whendone(self.ui.tableWidget_results)

    def auto_del(self):
        tbl_res = self.ui.tableWidget_results
        if not tbl_res.rowCount():
            return
        if not self.ui.tableWidget_results.selectedItems():
            return
        tbl_res.setDisabled(True)

        self.ui.listWidget_autoDelRules.setDisabled(True)

        items = self.ui.tableWidget_results.selectedItems()
        filename_1, filename_2 = items[0].text(), items[1].text()

        adr = self.ui.listWidget_autoDelRules

        for i in range(adr.count()):
            rule = adr.item(i).text()
            comp_func = min if "smaller" in rule else max

            if "dimension" in rule:
                attr_1 = self.info_store[filename_1][2][0] * self.info_store[filename_1][2][1]
                attr_2 = self.info_store[filename_2][2][0] * self.info_store[filename_2][2][1]
            elif "width" in rule:
                attr_1, attr_2 = self.info_store[filename_1][2][0], self.info_store[filename_2][2][
                    0]
            elif "height" in rule:
                attr_1, attr_2 = self.info_store[filename_1][2][1], self.info_store[filename_2][2][
                    1]
            elif "file size" in rule:
                attr_1, attr_2 = self.info_store[filename_1][1], self.info_store[filename_2][1]
            else:
                special = 0 if "the left" in rule else 1

            try:
                wid = self.image_viewer1.label if special else self.image_viewer2.label
                self.del_image(items[special], wid)
                print("Rule applied --> %s" % rule)
                break
            except NameError:  # if 'special' is not defined
                if attr_1 == attr_2:
                    continue
                print("Rule applied --> %s" % rule)
                if comp_func(attr_1, attr_2) == attr_1:
                    res = 0
                else:
                    res = 1
                wid = self.image_viewer2.label if res else self.image_viewer1.label
                self.del_image(items[res], wid)
                break

        self.ui.listWidget_autoDelRules.setEnabled(True)
        tbl_res.setEnabled(True)

    def auto_del_all(self):
        tbl_res = self.ui.tableWidget_results
        if not tbl_res.rowCount():
            return

        QMessageBox.question(self,
                             "Nayan - Question",
                             "Are you sure you want to apply auto-delete to all the duplicate "
                             "pairs?\n"
                             "WARNING: No deletion confirmations will be shown.")

        tbl_res.itemSelectionChanged.disconnect(self.result_table_selection_changed)
        tbl_res.setDisabled(True)
        self.ui.listWidget_autoDelRules.setDisabled(True)

        row_count = tbl_res.rowCount()
        prog_dlg = QProgressDialog("Auto-deletion in progres...", "Cancel", 0, row_count, self)
        # prog_dlg.setWindowModality(Qt.NonModal)
        QApplication.processEvents()
        i = 0

        adr = self.ui.listWidget_autoDelRules
        rules = [adr.item(i).text() for i in range(adr.count())]

        while tbl_res.rowCount():
            if prog_dlg.wasCanceled() or i == row_count:
                break

            filename_1, filename_2 = tbl_res.item(0, 0).text(), tbl_res.item(0, 1).text()

            for rule in rules:
                comp_func = min if "smaller" in rule else max

                if "dimension" in rule:
                    attr_1 = self.info_store[filename_1][2][0] * self.info_store[filename_1][2][1]
                    attr_2 = self.info_store[filename_2][2][0] * self.info_store[filename_2][2][1]
                elif "width" in rule:
                    attr_1, attr_2 = self.info_store[filename_1][2][0],\
                                        self.info_store[filename_2][2][0]
                elif "height" in rule:
                    attr_1, attr_2 = self.info_store[filename_1][2][1], \
                                        self.info_store[filename_2][2][1]
                elif "file size" in rule:
                    attr_1, attr_2 = self.info_store[filename_1][1], self.info_store[filename_2][1]
                else:
                    special = 0 if "the left" in rule else 1

                try:
                    try:
                        # print(filename_2 if special else filename_1, "pseudo-deleted")
                        tbl_res.removeRow(0)
                        send2trash(filename_2 if special else filename_1)
                    except OSError:
                        QMessageBox.warning(self,
                                            "Nayan - Warning",
                                            "Failed to delete the file! Please check whether the file exists "
                                            "and Nayan has permission to delete it.",
                                            QMessageBox.Close)
                        continue
                    break
                except NameError:  # if 'special' is not defined
                    if attr_1 == attr_2:
                        continue
                    if comp_func(attr_1, attr_2) == attr_1:
                        res = 0
                    else:
                        res = 1
                    try:
                        # print(filename_2 if res else filename_1, "pseudo-deleted")
                        tbl_res.removeRow(0)
                        send2trash(filename_2 if res else filename_1)
                    except OSError:
                        QMessageBox.warning(self,
                                            "Nayan - Warning",
                                            "Failed to delete the file! Please check whether the file exists "
                                            "and Nayan has permission to delete it.",
                                            QMessageBox.Close)
                        continue
                    break
            i += 1
            prog_dlg.setValue(i)
            QApplication.processEvents()
        prog_dlg.hide()
        prog_dlg.deleteLater()

        tbl_res.itemSelectionChanged.connect(self.result_table_selection_changed)
        self.result_table_selection_changed()
        self.ui.listWidget_autoDelRules.setEnabled(True)
        tbl_res.setEnabled(True)

    def open_left_img_folder(self):
        items = self.ui.tableWidget_results.selectedItems()
        if not items:
            return
        self.open_folder(items[0].text())

    def open_right_img_folder(self):
        items = self.ui.tableWidget_results.selectedItems()
        if not items:
            return
        self.open_folder(items[1].text())

    def stop_everything_before_exit(self):
        if self.scanner and self.scanner.isRunning():
            print("I'm trying to clean up your mess... >(")
            self.scanner.stop()

    def set_ui_frozen(self, b):
        self.ui.tabWidget.setDisabled(b)
        self.ui.listWidget_targets.setDisabled(b)
        self.ui.pushButton_addFilesFolders.setDisabled(b)
        self.ui.pushButton_selectAll.setDisabled(b)
        self.ui.pushButton_removeSelected.setDisabled(b)

    def about(self):
        QMessageBox.about(self,
                          "About - Nayan",
                          "<html><body>"
                          "<p>Nayan  - A duplicate image finder built with Python using the "
                          "wonderful Qt framework through the PyQt5 bindings.</p><p>"
                          "Nayan is free and open source software released under the <a "
                          "href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\">GNU "
                          "GPL v3.0</a>.</p>"
                          "<p>© 2016 Shravan Kaushik</p>"
                          "</body></html>")

    def toggle_theme(self):
        import qtawesome as qta
        from PyQt5.QtWidgets import qApp

        global ACTIVE_PALETTE, DARK_PALETTE, LIGHT_PALETTE
        if ACTIVE_PALETTE:  # if dark theme is active
            qApp.setPalette(LIGHT_PALETTE)
            ACTIVE_PALETTE = 0
            self.ui.pushButton_img1Delete.setIcon(
                qta.icon("fa.trash", color='black', color_active='#34DB8A'))
            self.ui.pushButton_img2Delete.setIcon(
                qta.icon("fa.trash", color='black', color_active='#34DB8A'))
            self.ui.pushButton_img1OpenFolder.setIcon(
                qta.icon("fa.folder-open", color='black', color_active='#34DB8A'))
            self.ui.pushButton_img2OpenFolder.setIcon(
                qta.icon("fa.folder-open", color='black', color_active='#34DB8A'))
            self.ui.pushButton_swap.setIcon(
                qta.icon("fa.exchange", color='black', color_active='#34DB8A'))
            self.ui.pushButton_up.setIcon(
                qta.icon("fa.arrow-up", color='black', color_active='#34DB8A'))
            self.ui.pushButton_down.setIcon(
                qta.icon("fa.arrow-down", color='black', color_active='#34DB8A'))
            self.ui.pushButton_rotateImg1.setIcon(
                qta.icon("fa.rotate-right", color='black', color_active='#34DB8A'))
            self.ui.pushButton_rotateImg2.setIcon(
                qta.icon("fa.rotate-right", color='black', color_active='#34DB8A'))
            self.ui.toolButton_autoDel.setIcon(
                qta.icon("fa.magic", color='black', color_active='#34DB8A'))
            self.ui.pushButton_scan.setIcon(
                qta.icon("fa.search", color='black', color_active='#34DB8A'))
            self.ui.pushButton_cancelOperation.setIcon(
                qta.icon("fa.times-circle", color='black', color_active='#34DB8A'))
        else:
            qApp.setPalette(DARK_PALETTE)
            ACTIVE_PALETTE = 1
            self.ui.pushButton_img1Delete.setIcon(
                qta.icon("fa.trash", color='white', color_active='#34DB8A'))
            self.ui.pushButton_img2Delete.setIcon(
                qta.icon("fa.trash", color='white', color_active='#34DB8A'))
            self.ui.pushButton_img1OpenFolder.setIcon(
                qta.icon("fa.folder-open", color='white', color_active='#34DB8A'))
            self.ui.pushButton_img2OpenFolder.setIcon(
                qta.icon("fa.folder-open", color='white', color_active='#34DB8A'))
            self.ui.pushButton_swap.setIcon(
                qta.icon("fa.exchange", color='white', color_active='#34DB8A'))
            self.ui.pushButton_up.setIcon(
                qta.icon("fa.arrow-up", color='white', color_active='#34DB8A'))
            self.ui.pushButton_down.setIcon(
                qta.icon("fa.arrow-down", color='white', color_active='#34DB8A'))
            self.ui.pushButton_rotateImg1.setIcon(
                qta.icon("fa.rotate-right", color='white', color_active='#34DB8A'))
            self.ui.pushButton_rotateImg2.setIcon(
                qta.icon("fa.rotate-right", color='white', color_active='#34DB8A'))
            self.ui.toolButton_autoDel.setIcon(
                qta.icon("fa.magic", color='white', color_active='#34DB8A'))
            self.ui.pushButton_scan.setIcon(
                qta.icon("fa.search", color='white', color_active='#34DB8A'))
            self.ui.pushButton_cancelOperation.setIcon(
                qta.icon("fa.times-circle", color='white', color_active='#34DB8A'))


class IntegerTableWidgetItem(QTableWidgetItem):
    def __init__(self, value):
        super(IntegerTableWidgetItem, self).__init__(str(value))

    def __lt__(self, other):
        self_data_value = int(self.text())
        other_data_value = int(other.text())
        return self_data_value < other_data_value


def main():
    from PyQt5.QtGui import QPalette, QColor, QIcon
    import sys

    app = QApplication(sys.argv)
    app.setStyle("fusion")
    app.setWindowIcon(QIcon(":/icon.png"))
    global DARK_PALETTE, LIGHT_PALETTE
    LIGHT_PALETTE = app.palette()
    LIGHT_PALETTE.setColor(QPalette.Highlight, QColor("#34DB8A"))  # 3498DB
    DARK_PALETTE = app.palette()
    DARK_PALETTE.setColor(QPalette.Base, QColor("#2B2B2B"))
    DARK_PALETTE.setColor(QPalette.Window, QColor("#3C3F41"))
    DARK_PALETTE.setColor(QPalette.WindowText, QColor("#FFFFFF"))
    DARK_PALETTE.setColor(QPalette.Highlight, QColor("#34DB8A"))  # 3498DB
    DARK_PALETTE.setColor(QPalette.Text, QColor("#FFFFFF"))
    DARK_PALETTE.setColor(QPalette.Button, QColor("#3C3F41"))
    DARK_PALETTE.setColor(QPalette.ButtonText, QColor("#FFFFFF"))
    DARK_PALETTE.setColor(QPalette.Link, QColor("#F44336"))
    DARK_PALETTE.setColor(QPalette.LinkVisited, QColor("#D32F2F"))
    app.setPalette(DARK_PALETTE)
    app.setApplicationName("Nayan")
    app.setApplicationVersion("1.0")
    mw = MainWindow()
    app.aboutToQuit.connect(mw.stop_everything_before_exit)
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
